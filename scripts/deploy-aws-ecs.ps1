# =============================================================================
# Script de Deploy para AWS ECS usando Docker
# Deploy automatizado para Amazon Elastic Container Service
# =============================================================================

param(
    [ValidateSet("development", "staging", "production")]
    [string]$Environment = "production",
    
    [string]$Region = "us-east-1",
    [string]$ClusterName = "pipeline-devops-cluster",
    [string]$ServiceName = "pipeline-devops-service",
    [string]$ImageTag = "latest",
    [switch]$CreateInfrastructure = $false,
    [switch]$ForceNewDeployment = $false
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"
$ProjectName = "devops-pipeline"
$ECRRepository = "pipeline-devops"
$StackName = "pipeline-devops-stack"

Write-Host "üöÄ Deploy AWS ECS - $Environment" -ForegroundColor Green
Write-Host "Regi√£o: $Region | Cluster: $ClusterName" -ForegroundColor Cyan
Write-Host "=" * 60

# Fun√ß√£o para verificar pr√©-requisitos AWS
function Test-AWSPrerequisites {
    Write-Host "üîç Verificando pr√©-requisitos AWS..." -ForegroundColor Cyan
    
    # AWS CLI
    try {
        aws --version | Out-Null
        Write-Host "‚úÖ AWS CLI: OK" -ForegroundColor Green
    }
    catch {
        Write-Error "‚ùå AWS CLI n√£o encontrado. Instale: https://aws.amazon.com/cli/"
        return $false
    }
    
    # Credenciais AWS
    try {
        $identity = aws sts get-caller-identity --output json | ConvertFrom-Json
        Write-Host "‚úÖ Credenciais AWS: OK ($($identity.UserId))" -ForegroundColor Green
    }
    catch {
        Write-Error "‚ùå Credenciais AWS n√£o configuradas. Execute: aws configure"
        return $false
    }
    
    # Docker
    try {
        docker version | Out-Null
        Write-Host "‚úÖ Docker: OK" -ForegroundColor Green
    }
    catch {
        Write-Error "‚ùå Docker n√£o dispon√≠vel"
        return $false
    }
    
    return $true
}

# Fun√ß√£o para criar infraestrutura com CloudFormation
function Deploy-Infrastructure {
    if (-not $CreateInfrastructure) { return }
    
    Write-Host "üèóÔ∏è  Criando/Atualizando infraestrutura..." -ForegroundColor Cyan
    
    $templatePath = "iac/iac.yml"
    if (-not (Test-Path $templatePath)) {
        Write-Error "‚ùå Template CloudFormation n√£o encontrado: $templatePath"
        exit 1
    }
    
    # Verificar se stack existe
    $stackExists = $false
    try {
        aws cloudformation describe-stacks --stack-name $StackName --region $Region | Out-Null
        $stackExists = $true
        Write-Host "üìã Stack existente detectada: $StackName" -ForegroundColor Yellow
    }
    catch {
        Write-Host "üìã Criando nova stack: $StackName" -ForegroundColor Yellow
    }
    
    if ($stackExists) {
        # Atualizar stack existente
        Write-Host "üîÑ Atualizando stack..." -ForegroundColor Cyan
        try {
            aws cloudformation update-stack `
                --stack-name $StackName `
                --template-body file://$templatePath `
                --region $Region `
                --capabilities CAPABILITY_IAM
                
            Write-Host "‚è≥ Aguardando atualiza√ß√£o da stack..." -ForegroundColor Yellow
            aws cloudformation wait stack-update-complete --stack-name $StackName --region $Region
        }
        catch {
            if ($_.Exception.Message -like "*No updates are to be performed*") {
                Write-Host "‚úÖ Stack j√° est√° atualizada" -ForegroundColor Green
            } else {
                throw
            }
        }
    } else {
        # Criar nova stack
        Write-Host "üèóÔ∏è  Criando stack..." -ForegroundColor Cyan
        aws cloudformation create-stack `
            --stack-name $StackName `
            --template-body file://$templatePath `
            --region $Region `
            --capabilities CAPABILITY_IAM
            
        Write-Host "‚è≥ Aguardando cria√ß√£o da stack..." -ForegroundColor Yellow
        aws cloudformation wait stack-create-complete --stack-name $StackName --region $Region
    }
    
    Write-Host "‚úÖ Infraestrutura criada/atualizada!" -ForegroundColor Green
}

# Fun√ß√£o para obter informa√ß√µes da infraestrutura
function Get-InfrastructureInfo {
    Write-Host "üìã Obtendo informa√ß√µes da infraestrutura..." -ForegroundColor Cyan
    
    try {
        $outputs = aws cloudformation describe-stacks `
            --stack-name $StackName `
            --region $Region `
            --query "Stacks[0].Outputs" `
            --output json | ConvertFrom-Json
            
        $script:ecrUri = ($outputs | Where-Object { $_.OutputKey -eq "ECRRepositoryURI" }).OutputValue
        $script:clusterName = ($outputs | Where-Object { $_.OutputKey -eq "ECSClusterName" }).OutputValue
        $script:serviceName = ($outputs | Where-Object { $_.OutputKey -eq "ECSServiceName" }).OutputValue
        $script:loadBalancerDNS = ($outputs | Where-Object { $_.OutputKey -eq "LoadBalancerDNS" }).OutputValue
        
        Write-Host "‚úÖ ECR URI: $script:ecrUri" -ForegroundColor Green
        Write-Host "‚úÖ Cluster: $script:clusterName" -ForegroundColor Green
        Write-Host "‚úÖ Service: $script:serviceName" -ForegroundColor Green
        Write-Host "‚úÖ Load Balancer: $script:loadBalancerDNS" -ForegroundColor Green
        
        return $true
    }
    catch {
        Write-Error "‚ùå Erro ao obter informa√ß√µes da infraestrutura. Stack criada?"
        return $false
    }
}

# Fun√ß√£o para build e push da imagem para ECR
function Deploy-ImageToECR {
    Write-Host "üê≥ Fazendo build e push da imagem para ECR..." -ForegroundColor Cyan
    
    # Login no ECR
    Write-Host "üîê Fazendo login no ECR..." -ForegroundColor Yellow
    $loginCommand = aws ecr get-login-password --region $Region | docker login --username AWS --password-stdin $script:ecrUri.Split('/')[0]
    
    # Build da imagem
    Write-Host "üî® Construindo imagem..." -ForegroundColor Yellow
    $fullImageTag = "$($script:ecrUri):$ImageTag"
    docker build -t $ProjectName .
    docker tag $ProjectName $fullImageTag
    
    # Push para ECR
    Write-Host "üì§ Enviando imagem para ECR..." -ForegroundColor Yellow
    docker push $fullImageTag
    
    Write-Host "‚úÖ Imagem enviada: $fullImageTag" -ForegroundColor Green
    return $fullImageTag
}

# Fun√ß√£o para atualizar servi√ßo ECS
function Update-ECSService {
    param([string]$ImageUri)
    
    Write-Host "üöÄ Atualizando servi√ßo ECS..." -ForegroundColor Cyan
    
    # Obter defini√ß√£o atual da task
    $taskDefArn = aws ecs describe-services `
        --cluster $script:clusterName `
        --services $script:serviceName `
        --region $Region `
        --query "services[0].taskDefinition" `
        --output text
        
    $taskDef = aws ecs describe-task-definition `
        --task-definition $taskDefArn `
        --region $Region `
        --query "taskDefinition" `
        --output json | ConvertFrom-Json
    
    # Atualizar imagem na defini√ß√£o
    $taskDef.containerDefinitions[0].image = $ImageUri
    
    # Remover campos n√£o necess√°rios para registro
    $cleanTaskDef = @{
        family = $taskDef.family
        networkMode = $taskDef.networkMode
        requiresCompatibilities = $taskDef.requiresCompatibilities
        cpu = $taskDef.cpu
        memory = $taskDef.memory
        executionRoleArn = $taskDef.executionRoleArn
        containerDefinitions = $taskDef.containerDefinitions
    }
    
    # Salvar nova defini√ß√£o
    $newTaskDefJson = $cleanTaskDef | ConvertTo-Json -Depth 10
    $tempFile = "temp-taskdef.json"
    $newTaskDefJson | Set-Content $tempFile
    
    # Registrar nova task definition
    Write-Host "üìù Registrando nova task definition..." -ForegroundColor Yellow
    $newTaskDefArn = aws ecs register-task-definition `
        --cli-input-json file://$tempFile `
        --region $Region `
        --query "taskDefinition.taskDefinitionArn" `
        --output text
    
    Remove-Item $tempFile
    
    # Atualizar servi√ßo
    Write-Host "üîÑ Atualizando servi√ßo..." -ForegroundColor Yellow
    $updateParams = @(
        "--cluster", $script:clusterName,
        "--service", $script:serviceName,
        "--task-definition", $newTaskDefArn,
        "--region", $Region
    )
    
    if ($ForceNewDeployment) {
        $updateParams += "--force-new-deployment"
    }
    
    aws ecs update-service @updateParams | Out-Null
    
    # Aguardar deployment
    Write-Host "‚è≥ Aguardando deployment..." -ForegroundColor Yellow
    aws ecs wait services-stable `
        --cluster $script:clusterName `
        --services $script:serviceName `
        --region $Region
    
    Write-Host "‚úÖ Servi√ßo atualizado com sucesso!" -ForegroundColor Green
}

# Fun√ß√£o para verificar sa√∫de do deployment
function Test-DeploymentHealth {
    Write-Host "üè• Verificando sa√∫de do deployment..." -ForegroundColor Cyan
    
    # Status do servi√ßo
    $serviceInfo = aws ecs describe-services `
        --cluster $script:clusterName `
        --services $script:serviceName `
        --region $Region `
        --query "services[0]" `
        --output json | ConvertFrom-Json
    
    $runningCount = $serviceInfo.runningCount
    $desiredCount = $serviceInfo.desiredCount
    
    Write-Host "üìä Containers: $runningCount/$desiredCount rodando" -ForegroundColor Yellow
    
    # Testar Load Balancer
    if ($script:loadBalancerDNS) {
        Write-Host "üåê Testando Load Balancer..." -ForegroundColor Yellow
        
        $maxAttempts = 10
        $attempt = 0
        
        do {
            $attempt++
            try {
                $response = Invoke-WebRequest -Uri "http://$($script:loadBalancerDNS)" -TimeoutSec 10 -UseBasicParsing
                if ($response.StatusCode -eq 200) {
                    Write-Host "‚úÖ Aplica√ß√£o respondendo!" -ForegroundColor Green
                    return $true
                }
            }
            catch {
                Write-Host "Tentativa $attempt/$maxAttempts - Aguardando resposta..." -ForegroundColor Yellow
                Start-Sleep 30
            }
        } while ($attempt -lt $maxAttempts)
        
        Write-Host "‚ö†Ô∏è  Aplica√ß√£o pode n√£o estar respondendo ainda" -ForegroundColor Yellow
    }
    
    return $runningCount -eq $desiredCount
}

# Fun√ß√£o para mostrar informa√ß√µes do deployment
function Show-DeploymentInfo {
    Write-Host "`nüìä Informa√ß√µes do Deployment:" -ForegroundColor Cyan
    Write-Host "=" * 50
    
    Write-Host "üè∑Ô∏è  Ambiente: $Environment" -ForegroundColor Yellow
    Write-Host "üè∑Ô∏è  Imagem: $ImageTag" -ForegroundColor Yellow
    Write-Host "üåç Regi√£o: $Region" -ForegroundColor Yellow
    Write-Host "üèóÔ∏è  Cluster: $script:clusterName" -ForegroundColor Yellow
    Write-Host "‚öôÔ∏è  Servi√ßo: $script:serviceName" -ForegroundColor Yellow
    
    if ($script:loadBalancerDNS) {
        Write-Host "üåê URL: http://$($script:loadBalancerDNS)" -ForegroundColor Green
    }
}

# =============================================================================
# EXECU√á√ÉO PRINCIPAL
# =============================================================================

try {
    # Verificar pr√©-requisitos
    if (-not (Test-AWSPrerequisites)) {
        exit 1
    }
    
    # Criar infraestrutura se solicitado
    Deploy-Infrastructure
    
    # Obter informa√ß√µes da infraestrutura
    if (-not (Get-InfrastructureInfo)) {
        Write-Host "‚ö†Ô∏è  Execute com -CreateInfrastructure para criar a infraestrutura primeiro" -ForegroundColor Yellow
        exit 1
    }
    
    # Build e push da imagem
    $imageUri = Deploy-ImageToECR
    
    # Atualizar servi√ßo ECS
    Update-ECSService -ImageUri $imageUri
    
    # Verificar sa√∫de
    $healthy = Test-DeploymentHealth
    
    # Mostrar informa√ß√µes
    Show-DeploymentInfo
    
    if ($healthy) {
        Write-Host "`nüéâ Deploy AWS ECS Conclu√≠do com Sucesso!" -ForegroundColor Green
    } else {
        Write-Host "`n‚ö†Ô∏è  Deploy conclu√≠do, mas verifica√ß√£o de sa√∫de falhou" -ForegroundColor Yellow
    }
    
    Write-Host "üìñ Para monitorar: aws ecs describe-services --cluster $script:clusterName --services $script:serviceName --region $Region" -ForegroundColor Yellow
    
} catch {
    Write-Error "‚ùå Erro durante o deploy AWS: $($_.Exception.Message)"
    exit 1
}
