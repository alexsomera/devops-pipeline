name: Pipeline CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# VariÃ¡veis de ambiente disponÃ­veis para todos os jobs no workflow
env:
  S3_BUCKET: pipeline-artifacts-bucket
  AWS_REGION: us-east-1

jobs:
  # Job 1: Executa testes e build local
  test-and-build:
    name: Testes e Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v4
      
      - name: Instala o Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instala as dependÃªncias
        run: npm ci

      - name: Executa testes automatizados
        run: npm run test:ci

      - name: Faz o build da aplicaÃ§Ã£o
        run: npm run build

      - name: Cache dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 7

  # Job 2: Deploy dos artefatos para S3 (sÃ³ executa se os testes passaram)
  deploy-to-s3:
    name: Deploy de Artefatos para S3
    runs-on: ubuntu-latest
    needs: test-and-build  # SÃ³ executa se o job anterior passou
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # SÃ³ no push para main
    
    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v4

      - name: Baixa artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Preparar artefatos para upload
        run: |
          # Criar timestamp para versionamento
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          COMMIT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
          
          # Criar diretÃ³rio com versÃ£o
          mkdir -p artifacts/${TIMESTAMP}-${COMMIT_SHA}
          
          # Comprimir artefatos de build
          cd build
          tar -czf ../artifacts/${TIMESTAMP}-${COMMIT_SHA}/build-${TIMESTAMP}-${COMMIT_SHA}.tar.gz .
          cd ..
          
          # Criar arquivo de metadados
          cat > artifacts/${TIMESTAMP}-${COMMIT_SHA}/metadata.json << EOF
          {
            "version": "${TIMESTAMP}-${COMMIT_SHA}",
            "commit_sha": "${GITHUB_SHA}",
            "branch": "${GITHUB_REF_NAME}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${GITHUB_RUN_ID}",
            "workflow_run_number": "${GITHUB_RUN_NUMBER}"
          }
          EOF
          
          echo "ARTIFACT_VERSION=${TIMESTAMP}-${COMMIT_SHA}" >> $GITHUB_ENV

      - name: Upload de artefatos para S3
        run: |
          # Upload dos artefatos versionados
          aws s3 sync artifacts/ s3://${{ env.S3_BUCKET }}/artifacts/ \
            --delete \
            --metadata "commit-sha=${GITHUB_SHA},branch=${GITHUB_REF_NAME},build-date=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Criar link simbÃ³lico para latest
          aws s3 cp s3://${{ env.S3_BUCKET }}/artifacts/${{ env.ARTIFACT_VERSION }}/build-${{ env.ARTIFACT_VERSION }}.tar.gz \
            s3://${{ env.S3_BUCKET }}/artifacts/latest/build-latest.tar.gz
          
          # Copiar metadados para latest
          aws s3 cp s3://${{ env.S3_BUCKET }}/artifacts/${{ env.ARTIFACT_VERSION }}/metadata.json \
            s3://${{ env.S3_BUCKET }}/artifacts/latest/metadata.json

      - name: Listar artefatos no S3
        run: |
          echo "âœ… Artefatos enviados para S3:"
          aws s3 ls s3://${{ env.S3_BUCKET }}/artifacts/ --recursive --human-readable

      - name: Publicar mÃ©tricas no CloudWatch
        run: |
          # MÃ©trica de deploy bem-sucedido
          aws cloudwatch put-metric-data \
            --namespace "Pipeline/Deployment" \
            --metric-data MetricName=SuccessfulDeployments,Value=1,Unit=Count,Dimensions=Repository=${{ github.repository }},Branch=${{ github.ref_name }}
          
          # MÃ©trica de tamanho dos artefatos
          ARTIFACT_SIZE=$(aws s3api head-object \
            --bucket ${{ env.S3_BUCKET }} \
            --key artifacts/${{ env.ARTIFACT_VERSION }}/build-${{ env.ARTIFACT_VERSION }}.tar.gz \
            --query ContentLength --output text)
          
          aws cloudwatch put-metric-data \
            --namespace "Pipeline/Artifacts" \
            --metric-data MetricName=ArtifactSize,Value=$ARTIFACT_SIZE,Unit=Bytes,Dimensions=Repository=${{ github.repository }},Version=${{ env.ARTIFACT_VERSION }}

      - name: NotificaÃ§Ã£o de sucesso
        run: |
          echo "ðŸš€ Deploy de artefatos realizado com sucesso!"
          echo "ðŸ“¦ VersÃ£o: ${{ env.ARTIFACT_VERSION }}"
          echo "ðŸª£ Bucket S3: s3://${{ env.S3_BUCKET }}/artifacts/"
          echo "ðŸ”— Artefato: s3://${{ env.S3_BUCKET }}/artifacts/${{ env.ARTIFACT_VERSION }}/build-${{ env.ARTIFACT_VERSION }}.tar.gz"

  # Job 3: Limpeza de artefatos antigos (executa apÃ³s deploy bem-sucedido)
  cleanup-old-artifacts:
    name: Limpeza de Artefatos Antigos
    runs-on: ubuntu-latest
    needs: deploy-to-s3
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Remover artefatos antigos (manter Ãºltimos 10)
        run: |
          # Listar todas as versÃµes ordenadas por data (mais antigas primeiro)
          aws s3api list-objects-v2 \
            --bucket ${{ env.S3_BUCKET }} \
            --prefix "artifacts/" \
            --query 'sort_by(Contents, &LastModified)[:-10].[Key]' \
            --output text | grep -v "latest/" | while read key; do
            if [ ! -z "$key" ] && [ "$key" != "None" ]; then
              echo "Removendo artefato antigo: $key"
              aws s3 rm s3://${{ env.S3_BUCKET }}/$key
            fi
          done
          
          echo "âœ… Limpeza de artefatos antigos concluÃ­da"
